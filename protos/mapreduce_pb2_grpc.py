# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mapreduce_pb2 as mapreduce__pb2


class MasterServiceStub(object):
    """Master Service - Workers connect to this
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/mapreduce.MasterService/RegisterWorker',
                request_serializer=mapreduce__pb2.WorkerInfo.SerializeToString,
                response_deserializer=mapreduce__pb2.RegisterResponse.FromString,
                )
        self.SendHeartbeat = channel.unary_unary(
                '/mapreduce.MasterService/SendHeartbeat',
                request_serializer=mapreduce__pb2.Heartbeat.SerializeToString,
                response_deserializer=mapreduce__pb2.HeartbeatResponse.FromString,
                )
        self.RequestTask = channel.unary_unary(
                '/mapreduce.MasterService/RequestTask',
                request_serializer=mapreduce__pb2.TaskRequest.SerializeToString,
                response_deserializer=mapreduce__pb2.TaskAssignment.FromString,
                )
        self.ReportTaskComplete = channel.unary_unary(
                '/mapreduce.MasterService/ReportTaskComplete',
                request_serializer=mapreduce__pb2.TaskResult.SerializeToString,
                response_deserializer=mapreduce__pb2.TaskAck.FromString,
                )


class MasterServiceServicer(object):
    """Master Service - Workers connect to this
    """

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportTaskComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=mapreduce__pb2.WorkerInfo.FromString,
                    response_serializer=mapreduce__pb2.RegisterResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=mapreduce__pb2.Heartbeat.FromString,
                    response_serializer=mapreduce__pb2.HeartbeatResponse.SerializeToString,
            ),
            'RequestTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestTask,
                    request_deserializer=mapreduce__pb2.TaskRequest.FromString,
                    response_serializer=mapreduce__pb2.TaskAssignment.SerializeToString,
            ),
            'ReportTaskComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportTaskComplete,
                    request_deserializer=mapreduce__pb2.TaskResult.FromString,
                    response_serializer=mapreduce__pb2.TaskAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mapreduce.MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """Master Service - Workers connect to this
    """

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MasterService/RegisterWorker',
            mapreduce__pb2.WorkerInfo.SerializeToString,
            mapreduce__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MasterService/SendHeartbeat',
            mapreduce__pb2.Heartbeat.SerializeToString,
            mapreduce__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MasterService/RequestTask',
            mapreduce__pb2.TaskRequest.SerializeToString,
            mapreduce__pb2.TaskAssignment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportTaskComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MasterService/ReportTaskComplete',
            mapreduce__pb2.TaskResult.SerializeToString,
            mapreduce__pb2.TaskAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
